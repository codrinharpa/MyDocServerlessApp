
service: clinics

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom:
  clinicsPhotosBucket: 'clinics-photos'
provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject	
        - s3:DeleteObject
        - s3:ListObjects
      Resource: "arn:aws:s3:::${self:custom.clinicsPhotosBucket}/*"
    - Effect: Allow
      Action:
        - cognito-idp:AdminCreateUser
      Resource: arn:aws:cognito-idp:eu-central-1:225908385928:userpool/eu-central-1_IPSHbLWaW
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:eu-central-1:225908385928:table/DoctorsToClinics
functions:
  uploadClinicPhotos:
    handler: api/uploadPhotos.handler
    memorySize: 128
    description: Clinics photos upload
    events:
      - http: 
          path: clinics/photos
          method: post
    headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
    authorizer:
            name: clinicsAuthorizer
            arn: arn:aws:execute-api:eu-central-1:225908385928:d61oep1glg/*/POST/clinics/photos/*
  getClinicPhotos:
    handler: api/getPhotos.handler
    memorySize: 128
    description: Clinics photos
    events:
      - http: 
          path: clinics/photos/{email}
          method: get
  createDoctor:
    handler: api/createDoctor.handler
    memorySize: 256
    description: Create doctors
    events:
      - http: 
          path: clinics/createDoctor/
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
