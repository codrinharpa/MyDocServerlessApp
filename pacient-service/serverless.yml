

service: pacient

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom:
  pacientsProfilePhotosBucket: 'pacients-profile-photos'

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:eu-central-1:225908385928:table/*
functions:
  createPacient:
    handler: api/createPacient.handler
    memorySize: 128
    description: Creates a pacient for a doctor
    events:
      - http: 
          path: pacients/create
          method: post
          cors: true
  getPacientsNames:
    handler: api/getPacientsNames.handler
    memorySize: 128
    description: Gets all pacients for a clinic
    events:
      - http: 
          path: pacients/getPacientsNames
          method: get
          cors: true
  getPacient:
    handler: api/getPacient.handler
    memorySize: 128
    description: Gets all pacients for a clinic
    events:
      - http: 
          path: pacients/getPacient/{phone}
          method: get
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
